#!/usr/bin/env node

'use strict';

const helpwanted = require('../lib/helpwanted'), 
 logger = require('../lib/logger'),
 argv = require('minimist')(process.argv.slice(2)),
 subMonths = require('date-fns/sub_months'),
 format = require('date-fns/format'),
 prompt = require('prompt');

if (argv.h || argv.help) {
    logger.info([
        'helpwanted v0.1.2',
        'Shows GitHub issues labelled \'helpwanted\'for the dependencies used in your project',
        '',
        'usage: helpwanted [file] [options]',
        '',
        'file:              Specific file to scan. Either package.json or composer.json (optional: both by default)',
        'options:',
        '  --username       Your Github account username. Skips prompt if supplied together with --password',
        '  --password       Your Github account password. Skips prompt if supplied together with --username',
        '  -n --noauth      Do not authenticate with GitHub',
        '                   WARNING: errors may occur due to API rate limiting policies. See https://developer.github.com/v3/#rate-limiting',
        '',
        '  --since=YY-MM-DD Only show results after specified date [default: 4 months ago]',
        '  -v --verbose     Verbose output logging',
        '',
        '  -h --help        Print this list and exit.'
    ].join('\n'));
    process.exit();
}

const since = argv.since || format(subMonths(new Date(), 4), 'YY-MM-DD');

var scanOptions = { verbose: argv.v || argv.verbose, since, specificFile: null };

if (argv._.length) {
    const specificFile = argv._[0];

    if (specificFile === 'package.json' || specificFile === 'composer.json') {
        scanOptions.specificFile = specificFile;
    } else {
        logger.error(`Currently, only scanning of package.json or composer.json is supported.`);
        return 1;
    }
}

if (!argv.n && !argv.noauth) {
    var prompt_attributes = [
        {
            name: 'username',
            description: 'Your username',
        },
        {
            name: 'password',
            description: 'Your password',
            hidden: true
        }
    ];
    prompt.override = argv;

    prompt.message = 'GitHub';
    prompt.start();
    prompt.get(prompt_attributes, (err, auth) => {

        if (err) {
            logger.error(`\n${err}`);
            return 1;
        }

        scanOptions.auth = auth;
        run();

    });
} else {
    run();
}

function run() {
    helpwanted.scan(logger, scanOptions);
}